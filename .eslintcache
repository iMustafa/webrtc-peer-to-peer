[{"/Users/imustafa/Projects/Freelancer/webrtc/src/App.js":"1","/Users/imustafa/Projects/Freelancer/webrtc/src/index.js":"2","/Users/imustafa/Projects/Freelancer/webrtc/src/components/message.js":"3","/Users/imustafa/Projects/Freelancer/webrtc/src/components/bottom-page.js":"4","/Users/imustafa/Projects/Freelancer/webrtc/src/redux/index.js":"5","/Users/imustafa/Projects/Freelancer/webrtc/src/components/gender-button.js":"6","/Users/imustafa/Projects/Freelancer/webrtc/src/components/gender-dialog.js":"7","/Users/imustafa/Projects/Freelancer/webrtc/src/redux/reducers/messages.reducer.js":"8","/Users/imustafa/Projects/Freelancer/webrtc/src/components/start-button.js":"9"},{"size":13425,"mtime":1610684466962,"results":"10","hashOfConfig":"11"},{"size":359,"mtime":1610588745636,"results":"12","hashOfConfig":"11"},{"size":1448,"mtime":1610588914189,"results":"13","hashOfConfig":"11"},{"size":6535,"mtime":1610580571108,"results":"14","hashOfConfig":"11"},{"size":135,"mtime":1610588562059,"results":"15","hashOfConfig":"11"},{"size":1427,"mtime":1610679884254,"results":"16","hashOfConfig":"11"},{"size":2045,"mtime":1610678836794,"results":"17","hashOfConfig":"11"},{"size":376,"mtime":1610677208893,"results":"18","hashOfConfig":"11"},{"size":979,"mtime":1610679842949,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"h3rpn5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/imustafa/Projects/Freelancer/webrtc/src/App.js",["39","40","41"],"import { useEffect, useState, useRef, Fragment } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Peer from \"peerjs\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FlipCameraAndroidIcon from \"@material-ui/icons/FlipCameraAndroid\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport { makeStyles } from \"@material-ui/core\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Message from \"./components/message\";\nimport BottomPage from \"./components/bottom-page\";\nimport Picker from \"emoji-picker-react\";\nimport GenderButton from \"./components/gender-button\";\nimport StartButton from \"./components/start-button\";\n\nconst socket = socketIOClient();\nconst useStyles = makeStyles(() => ({\n  playButton: {\n    color: \"#FFF\",\n    fontSize: 82,\n  },\n  skipButton: {\n    color: \"#FFF\",\n    fontSize: 50,\n  },\n}));\n\nconst App = () => {\n  const messages = useSelector((state) => state.messages.messages);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const myVideoRef = useRef();\n  const userVideoRef = useRef();\n  const canvasRef = useRef();\n  const msgsContainerRef = useRef();\n  const [message, setMessage] = useState(\"\");\n  const [userId, setUserId] = useState(null);\n  const [guestId, setGuestId] = useState(null);\n  const [roomId, setRoomId] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const [isShowingEmojiPicker, setIsShowingEmojiPicker] = useState(false);\n  const [isShowingInput, setIsShowingInput] = useState(false);\n  const [isMobile] = useState(\n    window.innerWidth <= 500 && window.innerHeight <= 900\n  );\n\n  const endCall = (emitEvent = false) => {\n    if (emitEvent) socket.emit(\"pair-to-room\");\n\n    setRoomId(null);\n    setGuestId(null);\n    userVideoRef.current.srcObject = null;\n    setIsSearching(true);\n  };\n\n  useEffect(() => {\n    socket.on(\"connection-rebound\", (userId) => {\n      setUserId(userId);\n      socket.off(\"connection-rebound\", (_) => {});\n    });\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    var time = 0;\n    var intervalId = 0;\n\n    const makeNoise = () => {\n      const imgd = context.createImageData(canvas.width, canvas.height);\n      const pix = imgd.data;\n\n      for (var i = 0, n = pix.length; i < n; i += 4) {\n        pix[i] = pix[i + 1] = pix[i + 2] = 250 * Math.random();\n        pix[i + 3] = 255;\n      }\n\n      context.putImageData(imgd, 0, 0);\n      time = (time + 1) % canvas.height;\n    };\n\n    intervalId = setInterval(makeNoise, 40);\n  }, []);\n\n  useEffect(() => {\n    const getUserMedia = async () => {\n      try {\n        const peer = new Peer(userId, {\n          // host: \"/\",\n          // port: 3001,\n          // path: \"/\",\n          // secure: true\n        });\n\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true,\n        });\n        addVideoStream(stream, true);\n\n        socket.on(\"paired-to-room\", ({ room }) => {\n          const peerIdArr = room.split(\"#\");\n          const guestId = peerIdArr[0] === userId ? peerIdArr[1] : peerIdArr[0];\n          if (peerIdArr[0] === userId) {\n            const call = peer.call(guestId, stream);\n            call.on(\"stream\", (userVideoStream) => {\n              addVideoStream(userVideoStream);\n            });\n            socket.on(\"peer-disconnected\", (_) => {\n              call.close();\n              socket.off(\"peer-disconnected\", () => {});\n            });\n            call.on(\"close\", (_) => {\n              endCall(true);\n              dispatch({ type: \"CLEAR_MESSAGES\" });\n              socket.off(\"message-recieved\", (_) => {});\n            });\n          }\n\n          socket.on(\"message-recieved\", ($message) => {\n            dispatch({ type: \"ADD_MESSAGE\", payload: $message });\n            msgsContainerRef.current.scrollTop =\n              msgsContainerRef.current.scrollHeight;\n          });\n\n          setGuestId(guestId);\n          setRoomId(room);\n        });\n\n        peer.on(\"error\", (e) => {\n          console.log(e);\n        });\n\n        peer.on(\"call\", (call) => {\n          call.answer(stream);\n          call.on(\"stream\", (userVideoStream) => {\n            addVideoStream(userVideoStream);\n          });\n          socket.on(\"peer-disconnected\", (_) => {\n            call.close();\n          });\n          call.on(\"close\", (_) => {\n            endCall(true);\n            dispatch({ type: \"CLEAR_MESSAGES\" });\n            socket.off(\"message-recieved\", (_) => {});\n          });\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    if (userId) getUserMedia();\n  }, [userId]);\n\n  const addVideoStream = (stream, isMine = false) => {\n    (isMine ? myVideoRef : userVideoRef).current.srcObject = stream;\n    (isMine ? myVideoRef : userVideoRef).current.addEventListener(\n      \"loadedmetadata\",\n      (_) => {\n        if (isMine) myVideoRef.current.muted = true;\n        (isMine ? myVideoRef : userVideoRef).current.play();\n      }\n    );\n  };\n\n  const skipCall = () => {\n    if (roomId) socket.emit(\"skip\", { room: roomId });\n  };\n\n  const sendMessage = () => {\n    socket.emit(\"message\", { message, sentBy: userId });\n    setMessage(\"\");\n  };\n\n  return (\n    <Fragment>\n      {!isMobile ? (\n        <Fragment>\n          <div className=\"root\">\n            <div className=\"video-grid\">\n              <div className=\"video-container\">\n                <video ref={userVideoRef} hidden={!roomId} />\n                <canvas ref={canvasRef} hidden={roomId} />\n                {!!(userId && !roomId && !isSearching) && (\n                  <div className=\"overlay\">\n                    <div className=\"buttons-container\">\n                      <GenderButton />\n                      <StartButton\n                        setIsSearching={setIsSearching}\n                        socket={socket}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div className=\"video-container\">\n                <video ref={myVideoRef} />\n              </div>\n            </div>\n\n            <div className=\"bottom-group\">\n              <div className=\"room-controls\">\n                {!isSearching && roomId ? (\n                  <IconButton style={{ marginLeft: 25 }}>\n                    <StopIcon className={classes.playButton} />\n                  </IconButton>\n                ) : isSearching && !roomId ? (\n                  <CircularProgress />\n                ) : (\n                  <Fragment></Fragment>\n                )}\n                {roomId && (\n                  <IconButton onClick={skipCall}>\n                    <SkipNextIcon className={classes.skipButton} />\n                  </IconButton>\n                )}\n              </div>\n\n              <div className=\"room-messages\">\n                <div className=\"messages-container\" ref={msgsContainerRef}>\n                  {messages.map((m, i) => (\n                    <Message key={i} message={m} userId={userId} />\n                  ))}\n                </div>\n\n                <FormControl className=\"message-input\">\n                  <Input\n                    style={{ position: \"relative\" }}\n                    type=\"text\"\n                    disableUnderline={true}\n                    value={message}\n                    placeholder=\"Type your message here and press Enter\"\n                    onKeyPress={(e) => {\n                      const { charCode } = e;\n                      if (charCode === 13) {\n                        sendMessage();\n                        setIsShowingEmojiPicker(false);\n                      }\n                    }}\n                    onChange={(e) => {\n                      setMessage(e.target.value);\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          onClick={() => {\n                            setIsShowingEmojiPicker(!isShowingEmojiPicker);\n                          }}\n                        >\n                          <InsertEmoticonIcon />\n                        </IconButton>\n\n                        <div\n                          style={{\n                            display: isShowingEmojiPicker ? \"block\" : \"none\",\n                          }}\n                        >\n                          <Picker\n                            onEmojiClick={($event, o) => {\n                              const { emoji } = o;\n                              setMessage(message.concat(emoji));\n                            }}\n                            groupNames={{ smileys_people: \"yellow faces\" }}\n                            disableSearchBar={true}\n                            disableSkinTonePicker={true}\n                          />\n                        </div>\n\n                        <IconButton onClick={sendMessage}>\n                          <SendIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                  />\n                </FormControl>\n              </div>\n            </div>\n          </div>\n          <BottomPage />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <div id=\"mobile-root\">\n            <div className=\"video-grid-mobile\">\n              <div className=\"video-container-mobile\">\n                <video ref={userVideoRef} hidden={!roomId} />\n                <canvas ref={canvasRef} hidden={roomId} />\n                {!!(userId && !roomId && !isSearching) && (\n                  <div className=\"overlay\">\n                    <div className=\"buttons-container\">\n                      <GenderButton />\n                      <StartButton\n                        setIsSearching={setIsSearching}\n                        socket={socket}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div className=\"video-container-mobile\">\n                <video ref={myVideoRef} />\n              </div>\n            </div>\n            <div className=\"bottom-part-container-mobile\">\n              <div className={!isShowingInput ? \"bottom-part-mobile\" : \"bottom-part-mobile white\"}>\n                {isSearching ? (\n                  <CircularProgress />\n                ) : !isSearching && !roomId ? (\n                  <Fragment />\n                ) : (\n                <Fragment>\n                  {!isShowingInput && (\n                    <IconButton\n                      onClick={() => {\n                        setIsShowingInput(true);\n                      }}\n                    >\n                      <ChatIcon style={{ color: \"#FFF\" }} />\n                    </IconButton>\n                  )}\n                  {isShowingInput ? (\n                    <div className=\"input-mobile\">\n                      <IconButton\n                        onClick={() => {\n                          setIsShowingInput(false);\n                        }}\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                      <FormControl className=\"message-input-mobile\">\n                        <Input\n                          style={{ position: \"relative\" }}\n                          disableUnderline={true}\n                          value={message}\n                          placeholder=\"Type your message here\"\n                          onKeyPress={(e) => {\n                            const { charCode } = e;\n                            if (charCode === 13) {\n                              sendMessage();\n                            }\n                          }}\n                          onChange={(e) => {\n                            setMessage(e.target.value);\n                          }}\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton onClick={sendMessage}>\n                                <SendIcon />\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                        />\n                      </FormControl>\n                    </div>\n                  ) : (\n                    <Fragment>\n                      <IconButton>\n                        <FlipCameraAndroidIcon style={{ color: \"#FFF\" }} />\n                      </IconButton>\n                      <IconButton>\n                        <StopIcon style={{ color: \"#FFF\" }} />\n                      </IconButton>\n                      <IconButton onClick={skipCall}>\n                        <SkipNextIcon style={{ color: \"#FFF\" }} />\n                      </IconButton>\n                    </Fragment>\n                  )}\n                </Fragment>\n                )}\n              </div>\n            </div>\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default connect(null, {})(App);\n","/Users/imustafa/Projects/Freelancer/webrtc/src/index.js",[],"/Users/imustafa/Projects/Freelancer/webrtc/src/components/message.js",["42","43","44","45","46"],"/Users/imustafa/Projects/Freelancer/webrtc/src/components/bottom-page.js",[],"/Users/imustafa/Projects/Freelancer/webrtc/src/redux/index.js",[],"/Users/imustafa/Projects/Freelancer/webrtc/src/components/gender-button.js",["47","48"],"/Users/imustafa/Projects/Freelancer/webrtc/src/components/gender-dialog.js",["49","50"],"/Users/imustafa/Projects/Freelancer/webrtc/src/redux/reducers/messages.reducer.js",[],"/Users/imustafa/Projects/Freelancer/webrtc/src/components/start-button.js",[],{"ruleId":"51","severity":1,"message":"52","line":46,"column":10,"nodeType":"53","messageId":"54","endLine":46,"endColumn":17},{"ruleId":"51","severity":1,"message":"55","line":88,"column":5,"nodeType":"53","messageId":"54","endLine":88,"endColumn":15},{"ruleId":"56","severity":1,"message":"57","line":159,"column":6,"nodeType":"58","endLine":159,"endColumn":14,"suggestions":"59"},{"ruleId":"51","severity":1,"message":"60","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":44,"column":24,"nodeType":"63","messageId":"64","endLine":44,"endColumn":26},{"ruleId":"65","severity":1,"message":"66","line":49,"column":7,"nodeType":"67","endLine":56,"endColumn":9},{"ruleId":"61","severity":1,"message":"62","line":52,"column":26,"nodeType":"63","messageId":"64","endLine":52,"endColumn":28},{"ruleId":"61","severity":1,"message":"62","line":59,"column":26,"nodeType":"63","messageId":"64","endLine":59,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":40,"column":9,"nodeType":"67","endLine":43,"endColumn":11},{"ruleId":"61","severity":1,"message":"62","line":41,"column":23,"nodeType":"63","messageId":"64","endLine":41,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":57,"column":13,"nodeType":"67","endLine":57,"endColumn":62},{"ruleId":"65","severity":1,"message":"66","line":67,"column":13,"nodeType":"67","endLine":67,"endColumn":64},"no-unused-vars","'guestId' is assigned a value but never used.","Identifier","unusedVar","'intervalId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["68"],"'FemaleIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"69","fix":"70"},"Update the dependencies array to be: [dispatch, userId]",{"range":"71","text":"72"},[5121,5129],"[dispatch, userId]"]